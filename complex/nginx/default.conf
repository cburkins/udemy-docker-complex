# define a backend (upstream) server
upstream client {
    # "server" is an nginx keyword
    # "client" refers to a defined service within docker-compose.yml
    server client:3000;
}

# define a backend (upstream) server
upstream api {
    server api:5000;
}

server {
    listen 80;

    location / {
        proxy_pass http://client;
    }

    # Gets rid of error:
    # WebSocket connection to 'ws://localhost:3050/sockjs-node/235/5ma0tewy/websocket' failed: Error during WebSocket 
    #    handshake: Unexpected response code: 400
    # React app (in browser) wants an active web socket (ws) connect to backend "client"
    # This gives the browser that web socket route through Nginx and back to React backend
    # Only really neccessary in Dev, but harmless in Prod
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        # (.*) gets stored in $1, so removes the "/api" from the front
        # break prevents nginx from trying to match the rewritten url to a new route
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}
